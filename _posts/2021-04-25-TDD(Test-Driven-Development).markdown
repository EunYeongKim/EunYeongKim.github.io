---
layout: post
title:  "TDD(Test-Driven-Development)"
date: 2021-04-25 22:40:00 +0900
categories: TDD TEST CleanCode
tags:
- TDD
---

[간단한 예제](https://kka7.tistory.com/m/134)로 TDD에 대해 공부하고 여러 블로그들을 돌아다니면서 정리한 글이다. 

실습한 예제는 [여기](https://github.com/EunYeongKim/Numero)서 확인할 수 있다.

✅ `TDD에 대하여 간단 정리`

<br>

# TDD(Test Driven Development) : 테스트 주도 개발

* 테스트가 개발을 이끌어 나간다.
* 테스트를 먼저 만들고, 테스트를 통과하기 위한 것을 짜는 것, 즉 만드는 과정에서 우선 테스트를 작성하고 그걸 실패하고, 통과하는 코드를 만들고 반복하면서 제대로 동작하는지에 대한 피드백을 적극적으로 받는 것

<br>

>  단위테스트 : 모듈이나 어플리케이션 안에 있는 개별적인 코드 단위가 예상대로 작동하는지 확인하는 반복적인 행위



<br>

# TDD 흐름도

* red - green - refactor 주기

<div class="mermaid">
stateDiagram
red --> green
green --> refactor
refactor --> red
</div>

* red : 실패하는 테스트 작성하기
* green : 테스트를 통과하기에 충분한 코드 작성하기
* refactor : 코드를 정리하고 최적화하기
* 모든 사용자 케이스를 처리할때까지 이전단계들 반복하기

<br>

* **실패하는 테스트로 시작하여 코드가 통과할 수 있도록 수정하는 이유는 잘못된 테스트(허위 양성: false-positive)를 피하기 위함임**
  * 테스트가 실패하는 것을 보지 못하는 경우에는 올바른 시나리오로 테스트하고 있다는 것을 확신할 수 없기 때문임

<br>

# TDD의 효과

* 단위 테스트는 코드가 "어떻게" 작성하는지 생각하는데 도움을 준다
* 문제를 빨리 발견하고, 변화를 쉽게하고, 통합을 간단하게 하고 설계를 개선할 수 있다는 것이다. 
  * 즉, 테스트 코드를 짜는 것은 설계도를 만들면서 프로그래밍을 한다고 생각해도 된다. 스케치를 하는 느낌으로 아키텍쳐를 짜면서 프로그래밍을 할 수 있다.
* "무엇"을 해야하는지에 있어서 구현 선택을 검토하는데 해가되지 않고, 그 선택들이 적절한지 아닌지 알아낸다. 주된 효과로는 단위 테스트를 추가하는 것은 애플리케이션의 유닛(함수/메소드)를 더 적게 만듦
* 클린코드를 위한 길
  * 요구사항이 수시로 변경되고 프로젝트 일정이 눈에 보이기 시작하면 테스트코드 없이 바로 로직을 구현하는 경우가 태반 -> 신속히 개발할 수 있지만, 나중에 유지보수 떄 문제가 발생한다. 
    * 유지보수라고는 하지만 새로운 기능을 요구할 떄도 있으므로
  * 기존 로직에 영향을 주지 않고 코드를 작성해야하는데, 테스트 코드 없이 구현하다보면 사이드 이펙트가 여기저기 터져서 결국 유지보수 기간에 코드에 대한 테스트코드를 다시 작성하는 사태가 발생함

<br>
  
> # TDD의 장점
>
> *  버그가 생기지 않는다.
>   * 처음부터 테스트를 작성을 하고 구현을 했기 때문에 버그가 잘 안생김 -> 코드 신뢰도 상승
>   * 현재 로그인한 유저가 어드민이냐, 일반유저냐 이런걸 테스트할 때는 로그인했다가 끄고, 로그인했다가 끄고,,, 이래버리니까
>   * 현재 사용자정보를 주입시키기만 하면 unit 테스트에서 모든것이 다 테스트가 됨
>
> * 기능변화가 있을  때 이미 테스트 코드가 존재하기 때문에 안심하고 기능을 추가할 수 있음

<br>

# TDD의 단점

* 설득하기 어렵다 
  * 왜 해야하냐?
* 익숙해지는데 시간이 걸릴 수 있다.
  * TDD는 결국 unit 테스트를 잘 작성을 하고 숙련된 unit test 작성방법을 득하면 이 단점은 해결할 수 있음

<br>

# 테스트 병렬화

테스트의 개수가 늘어날 수록 테스트의 시간도 비례함 -> 한정된 시간에 빌드가 계속 쌓여가다보면, 나중에는 테스트 결과를 확인하지 않고 merge하게 되는 상황이 발생할 수 있음

**테스트 병렬화** : 테스트 시간을 획기적으로 줄일 수 있음



* 기존의 UI테스트는 1개의 기기로 모든 테스트를 검증했다면, 병렬 테스트를 적용하면 동시에 2개 이상의 기기에서 테스트 진행 가능,
* XCode 9 부터 병렬 테스트 지원
* Edit Scheme -> Test -> 병렬화하고자 하는 Test의 options 선택
* Execute in parallel on Simulator에 체크

<br>

# 다른 테스트 방법론

* 승인 테스트 주도 개발 (ATDD : Acceptance Test_Driven Development) : TDD와 비슷하지만, 고객과 개발자는 공동 작업으로 승인 테스트를 작성함. 프로젝트 매니저는 고객의 예이고, 승인 테스트는 기능 테스트라고 함. 일반적으로 사용자 관점의 인터페이스 수준으로 테스트
* 동작 주도 개발(BDD : Behavior-Driven Development) : TDD테스트를 포함해서 테스트를 작성하는 방법을 설명함, BDD는 세부 구현보다는 원하는 동작을 테스트하도록 권장함. 단위테스트를 구성하는 방법에서 나타남. iOS에서 given-when-then 포맷을 사용할 수 있음. 이 포맷에서 먼저 필요한 값을 설정하고, 마지막으로 결과를 확인하기 전에 테스트 코드를 실행함

<br>

# 번외) 클린코드의 필요성

1. 유지보수하기 좋은 코드
   - 프로그래머 작업 중 가장 많은 시간을 투자하는 일이 유지보수이다.
2. 변화에 대응하는 핵심 능력
   - 기능 추가, 버그 수정, 레거시 코드 리뷰,,, 수정 작업과 같은 변화 자체에 확장성있게 대응하려면 클린 코드에 대한 이해와 작성 능력이 필수
3. 프로젝트 협업 능력 향상
   - 읽기 좋은 클린코드를 작성함으로서 여러명이 참여하는 프로젝트일수록 확장성있는 코드 작성 능력을 가진 개발자의 기여도는 높다.

<br>